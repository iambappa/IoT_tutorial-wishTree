#include "TinyGPS++.h"
//#include "SoftwareSerial.h"

//SoftwareSerial serial_connection(10, 11); //RX=pin 10, TX=pin 11
HardwareSerial hwSerial(2); // hardware serial- 0 is default (conn to USB), HW-serial-1 is unusable, no pin exposed; connect to RX2, TX2- GPIO-16, 17
TinyGPSPlus gps;//This is the GPS object that will pretty much do all the grunt work with the NMEA data
void setup()
{
  Serial.begin(9600); //This opens up communications to the Serial monitor in the Arduino IDE
  hwSerial.begin(9600); //This opens up communications to the GPS
  Serial.println("GPS Start");  //Just show to the monitor that the sketch has started
}

void loop()
{
  while(hwSerial.available())//While there are characters to come from the GPS
  {
    gps.encode(hwSerial.read());//This feeds the serial NMEA data into the library one char at a time
  }
  if(gps.location.isUpdated())//This will pretty much be fired all the time anyway but will at least reduce it to only after a package of NMEA data comes in
  {
    //Get the latest info from the gps object which it derived from the data sent by the GPS unit
    Serial.println("Satellite Count:");
    Serial.println(gps.satellites.value());
    Serial.println("Latitude:");
    Serial.println(gps.location.lat(), 6);
    Serial.println("Longitude:");
    Serial.println(gps.location.lng(), 6);
    Serial.println("Speed Kmph:");
    Serial.println(gps.speed.kmph());
    Serial.println("Altitude Meters:");
    Serial.println(gps.altitude.meters());
    Serial.println("Time Hour:");
    Serial.println(gps.time.hour()); // Hour (0-23) (u8)
    Serial.println("Time Minute:");
    Serial.println(gps.time.minute()); // Minute (0-59) (u8)
    Serial.println("");
  }
}
